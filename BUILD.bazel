load("@rules_cc//cc:defs.bzl", "cc_test")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make", "configure_make_variant")

package(default_visibility = ["//visibility:public"])

# All binaries built by the `elfutils` library.
_BINARIES = [
    "eu-addr2line",
    "eu-ar",
    "eu-elfclassify",
    "eu-elfcmp",
    "eu-elfcompress",
    "eu-elflint",
    "eu-findtextrel",
    "eu-make-debug-archive",
    "eu-nm",
    "eu-objdump",
    "eu-ranlib",
    "eu-readelf",
    "eu-size",
    "eu-srcfiles",
    "eu-stack",
    "eu-strings",
    "eu-strip",
    "eu-unstrip",
]


configure_make(
    name = "elfutils",
    lib_source = "@src//:all_srcs",
    configure_options = [
        # I think we don't need this.
        "--without-libintl-prefix",
        # Hopefully this doesn't blow up in our face.
        "--without-bzlib",
    ],
    args = [
        # Causes the build process to print the command lines, excellent
        # for debugging.
        "V=1",
    ],
    env = {
        # -lz: the configure step does not detect libz.so from `deps`
        # -lstdc++: there seemms to be ONE program which needs libstdc++,
        # and adding -lz seems to confuse the build process.
        "LDFLAGS": "-lz -lstdc++ $$(echo $${elfutils_bazel_LDFLAGS:-})",
        "CFLAGS": "-Wno-error $$(echo $${elfutils_bazel_CFLAGS:-})",
        "CXXFLAGS": "-Wno-error $$(echo $${elfutils_bazel_CFLAGS:-})",
        "PKG_CONFIG_PATH": "$$(echo $${elfutils_bazel_PKG_CONFIG_PATH:-})",
    },
    out_binaries = _BINARIES,
    out_shared_libs = [
        "libasm-0.193.so",
        "libasm.so",
        "libasm.so.1",
        "libdw-0.193.so",
        "libdw.so",
        "libdw.so.1",
        "libelf-0.193.so",
        "libelf.so",
        "libelf.so.1",
    ],
    out_static_libs = [
        "libasm.a",
        "libdw.a",
        "libelf.a",
    ],
    deps = [
        # This brings the bazel module for zlib into the build, but does not
        # help `configure` discover zlib. This is why we need to specify
        # `-lz` in `LDFLAGS` above.
        "@zlib//:zlib",
    ],
)


[
    # Generate a target for each binary, for example `//:eu-ar_bin`.
    filegroup(
        name = binary_name + "_bin",
        output_group = binary_name,
        srcs = [":elfutils"],
    )
    for binary_name in _BINARIES
]


# Try to link with elfutils to allow `bazel test //...` to verify it was
# built.
cc_test(
    name = "test",
    size = "small",
    srcs = [
        "test.cc",
    ],
    deps = [
        ":elfutils",
        "@zlib//:zlib",
    ],
)

# Link only with zlib to illustrate how linking works.
cc_test(
    name = "test_link_zlib",
    size = "small",
    srcs = [
        "test.cc",
    ],
    deps = [
        "@zlib//:zlib",
    ],
)

